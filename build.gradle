plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

/*
 * Gets the version name from the latest Git tag, omit leading "v" - yeah!
 * Note: a plugin way to do this would be via https://plugins.gradle.org/plugin/net.nemerosa.versioning
 * cmdlin:
 *     git describe --tags
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    def tag = stdout.toString().trim()
    return tag.startsWith("v") ? tag.substring(1) : tag
}

/*
 * Gets the commit hash from the latest Git
 * Note: a plugin way to do this would be via https://plugins.gradle.org/plugin/net.nemerosa.versioning
 */
def getGitCommitHash = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--format="%H"'
        standardOutput = stdout
    }
    return stdout.toString().trim().replace("\"", "")
}

version = version != null && version != "unspecified" ? version : getVersionName()

ext {
    specVendor           = 'International Air Transport Association (IATA)'
    product              = 'ONE Record Converter'
    specTitle            = 'ONE Record Ontology-Model'
    implVendor           = 'Riege Software'
    implTitle            = product + ' Java Library'
    implDescription      = implVendor + ' ' + product + ' Java Library'
    specVersion          = '1.1'
    implVersion          = version
    javaTarget           = JavaVersion.VERSION_1_8
}

group 'com.riege'
sourceCompatibility = javaTarget
targetCompatibility = javaTarget

java {
    withSourcesJar()    // to get a "sourcesJar" task
    withJavadocJar()    // to get a "javadocJar" task
}

tasks.withType(Jar) {
    manifest {
        attributes(
                "Built-By"               : System.properties['user.name'],
                "Build-Revision"         : getGitCommitHash(),
                "Build-Timestamp"		 : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                "Build-Jdk"      		 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                "Build-OS"      		 : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                "Created-By"     		 : "Gradle ${gradle.gradleVersion}",
                "Specification-Title"    : specTitle,
                "Specification-Vendor"   : specVendor,
                "Specification-Version"  : specVersion,
                "Implementation-Title"   : implTitle,
                "Implementation-Vendor"  : implVendor,
                "Implementation-Version" : implVersion
        )
    }
}

dependencies {
    // one-record-ontologymodel from riege.com is a public GitHub repository
    // but not published on mavenCentral.
    // Nevertheless it can be retrieved via https://jitpack.io
    // See also https://jitpack.io/#riege/one-record-ontologymodel
    //
    // One can also find current versions under the "Commit" tab from above URL!
    // -> get the "version id" from jitpack, replace dependency, done.
    //
    // jitpack dependency (version based):
    //     implementation('com.github.riege:one-record-ontologymodel:1.1.2') { transitive = false }
    // jitpack dependency (commit hash (e.g. daec14a075) based, for unreleased development versions):
    //     implementation('com.github.riege:one-record-ontologymodel:daec14a075') { transitive = false }
    //     implementation('com.github.riege:one-record-ontologymodel:e9f5883a21') { transitive = false }
    // github/riege internal dependency:
    //     implementation('com.riege:one-record-ontologymodel:1.1.2') { transitive = false }

    implementation('com.github.riege:one-record-ontologymodel:2.0.1') { transitive = false }

    // cargoxml-jaxb from riege.com cannot be retrieved via https://jitpack.io
    // because building it requires access to the Cargo-XML Toolkit schema files
    // which are not included on GitHub and JitPack has not access to them!
    // So we take it from local "lib" directory.
    // Note: Package is available at https://github.com/riege/cargoxml-jaxb
    implementation ":cargoxml-jaxb-8.1:"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'com.fasterxml.jackson.core:jackson-core:2.13.4'
    testImplementation "com.fasterxml.jackson.core:jackson-annotations:2.14.1"
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
}

test {
    useJUnitPlatform()
}

shadowJar {
    // When working with a Gradle project with the name myApp and version 1.0,
    // the default shadowJar task will output a file at:
    // build/libs/myApp-1.0-all.jar
    //
    // to remove the '-all', we set classifier to null:
    classifier = null
}
build.dependsOn(shadowJar)

repositories {
    flatDir dirs: "$rootProject.projectDir/lib"
    mavenCentral()
    mavenLocal()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/riege/packages")
        credentials {
            username = (project.findProperty("github.packages.access.user") ?: System.getenv("GITHUB_PACKAGES_ACCESS_USER")).toString()
            password = (project.findProperty("github.packages.access.token") ?: System.getenv("GITHUB_PACKAGES_ACCESS_TOKEN")).toString()
        }
    }
    maven { url 'https://jitpack.io' }
}

publishing {
    publications {
        shadow(MavenPublication) {
            publication -> project.shadow.component(publication)
            groupId group
            pom {
                name = implTitle
                description = implDescription
                url = System.getenv("PROJECT_URL")
            }
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            //name = "thisLibrary"
            url = System.getenv("MAVEN_PUBLISH_URL")
            credentials {
                username = System.getenv("MAVEN_PUBLISH_USERNAME")
                password = System.getenv("MAVEN_PUBLISH_PASSWORD")
            }
        }
    }
}
